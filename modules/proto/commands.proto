syntax = "proto2";

package bismuth;

// version 0.0.5

// A single tx
message TX {
    // Signature - 64 bytes
    required bytes txid=1;
    //
    required uint32 block_height=2;
    // Timestamp
    required uint32 timestamp=3;
    // the tester
    required string sender=4;
    // testee
    required string recipient=5;
    // Tx or test type
    required uint32 what=6;
    // numeric value
    required uint32 value=7;
    // params of the test and/or result
    optional string params=8;
    // pubkey - 64 bytes
    required bytes pubkey=9;
}

// A pos block with txs
message Block {
    required uint32 height=1;
    required uint32 round=2;
    required uint32 sir=3;
    // Timestamp
    required uint32 ts=4;
    required bytes previous_hash=5;
    repeated TX txs = 6;
    required uint32 msg_count=7;
    required uint32 sources=8;
    required bytes signature=9;
    // Blockhash
    required bytes block_hash=10;
    // Who - forger
    required string forger=11;
}

// a height status info block
message Height {
    // last block we have - both id and content
    required uint32 height=1;
    required uint32 round=2;
    required uint32 sir=3;
    required bytes block_hash=4;
    // validity of the chain
    // total unique sources for whole chain
    required uint32 uniques=5;
    // uniques for blocks of current round
    required uint32 uniques_round=6;
    // total unique forgers for whole chain
    required uint32 forgers=7;
    // uniques forgers for current round
    required uint32 forgers_round=8;
}

message IP {
    // Would "bytes" be better suited?
    required uint32 ipv4=1;
    optional uint64 ipv6a=2;
    optional uint64 ipv6b=3;
    optional uint32 port=4 [default = 5658];
}

message Command {
    enum Type {
        // Hypernodes messages
        hello = 0;
        ok = 1;
        ko = 2;
        ping = 3;
        peers = 4;
        status = 5;
        block = 6; // send forged block
        tx = 7;
        mempool = 8;
        update = 9;
        height = 10;  // Share - exchange height
        blockinfo = 11; // ask info for a specific block height. Question comes with an int32, answer with a height in height_value
        blocksync = 12; // ask info for a list of blocks starting with the given one. Question comes with an int32, answer with full block(s) in block_value
        roundblocks = 13; // ask the full block data for a given round. Question comes with an int32, answer with block(s) in block_value
        // Client specific messages
        getblock = 14; // ask for full block content of a given height. Question comes with an int32, answer with block_value
        getaddtxs = 15; // Get txs issued from a specific address only, and from a given block height or a given transaction id.
        // Question comes with a string, answer with tx_value.
        // Will only give at most 100 txs in a batch at most.
        // Optionnal starting block height or starting signature is added in the string after a comma : address,50
        gettx = 16; // ask the full details of a specific tx by its signature (sent as hex encode in string_value). Returns tx in tx_values
        getheaders = 17; // ask the block headers for latest 20 blocks. string_value can contain optional block start and number of block like
        // 50,10 (= 50 to 60) or ,50 (latest 50)
        // TODO: getround for current round stats, including upcoming jurors, or include as status? could be better. or flag : extended status.
        getround = 18;
        // TODO: gethypernodes - list of valid hypernodes
        gethypernodes = 19;
    }
    required Type command = 1;

    oneof param {
        string string_value=2;
        int32 int32_value=3;
        Height height_value = 4;
    }
    // Can be one block for block command, or a series of block
    repeated Block block_value = 5;
    repeated TX tx_values = 6;
    repeated IP ip_values = 7;
    // Can be TX signatures or block hashs
    repeated bytes hash_values = 8;
}
